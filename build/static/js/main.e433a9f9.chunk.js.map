{"version":3,"sources":["StateProvider.js","Footer.js","Header.js","SongRow.js","Body.js","Player.js","spotify.js","Login.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Footer","spotify","item","token","playing","dispatch","useEffect","getMyCurrentPlaybackState","then","r","console","log","type","is_playing","handlePlayPause","pause","play","className","src","album","images","url","alt","name","artists","map","artist","join","onClick","skipToNext","getMyCurrentPlayingTrack","fontSize","skipToPrevious","Grid","container","spacing","xs","Slider","aria-labelledby","Header","user","SongRow","track","playSong","id","Body","discover_weekly","uris","res","tracks","items","Player","accessUrl","Login","href","s","SpotifyWebApi","App","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","_token","access_token","setAccessToken","getPlaylist","response","getMyTopArtists","top_artists","getMe","getUserPlaylists","playlists","Boolean","hostname","match","state","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e433a9f9.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\r\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\r\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\";\r\nimport \"./Footer.css\";\r\nimport { Grid, Slider } from \"@material-ui/core\";\r\n\r\nfunction Footer({ spotify }) {\r\n  const [{ token, item, playing }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    spotify.getMyCurrentPlaybackState().then((r) => {\r\n      console.log(r);\r\n\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: r.is_playing,\r\n      });\r\n\r\n      dispatch({\r\n        type: \"SET_ITEM\",\r\n        item: r.item,\r\n      });\r\n    });\r\n  }, [spotify]);\r\n\r\n  const handlePlayPause = () => {\r\n    if (playing) {\r\n      spotify.pause();\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: false,\r\n      });\r\n    } else {\r\n      spotify.play();\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const skipNext = () => {\r\n    spotify.skipToNext();\r\n    spotify.getMyCurrentPlayingTrack().then((r) => {\r\n      dispatch({\r\n        type: \"SET_ITEM\",\r\n        item: r.item,\r\n      });\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: true,\r\n      });\r\n    });\r\n  };\r\n\r\n  const skipPrevious = () => {\r\n    spotify.skipToPrevious();\r\n    spotify.getMyCurrentPlayingTrack().then((r) => {\r\n      dispatch({\r\n        type: \"SET_ITEM\",\r\n        item: r.item,\r\n      });\r\n      dispatch({\r\n        type: \"SET_PLAYING\",\r\n        playing: true,\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <div className=\"footer__left\">\r\n        <img\r\n          className=\"footer__albumLogo\"\r\n          src={item?.album.images[0].url}\r\n          alt={item?.name}\r\n        />\r\n        {item ? (\r\n          <div className=\"footer__songInfo\">\r\n            <h4>{item.name}</h4>\r\n            <p>{item.artists.map((artist) => artist.name).join(\", \")}</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"footer__songInfo\">\r\n            <h4>No song is playing</h4>\r\n            <p>...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"footer__center\">\r\n        <ShuffleIcon className=\"footer__green\" />\r\n        <SkipPreviousIcon onClick={skipNext} className=\"footer__icon\" />\r\n        {playing ? (\r\n          <PauseCircleOutlineIcon\r\n            onClick={handlePlayPause}\r\n            fontSize=\"large\"\r\n            className=\"footer__icon\"\r\n          />\r\n        ) : (\r\n          <PlayCircleOutlineIcon\r\n            onClick={handlePlayPause}\r\n            fontSize=\"large\"\r\n            className=\"footer__icon\"\r\n          />\r\n        )}\r\n        <SkipNextIcon onClick={skipPrevious} className=\"footer__icon\" />\r\n        <RepeatIcon className=\"footer__green\" />\r\n      </div>\r\n      <div className=\"footer__right\">\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <PlaylistPlayIcon />\r\n          </Grid>\r\n          <Grid item>\r\n            <VolumeDownIcon />\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Slider aria-labelledby=\"continuous-slider\" />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\n// import { Avatar } from \"@material-ui/core\";\r\n// import SearchIcon from \"@material-ui/icons/Search\";\r\n// import { useEffect } from \"react\";\r\n\r\nfunction Header({ spotify }) {\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      {/* <div className=\"header__left\">\r\n        <SearchIcon />\r\n        <input\r\n          placeholder=\"Search for Artists, Songs, or Podcasts \"\r\n          type=\"text\"\r\n        />\r\n      </div> */}\r\n      {/* <div className=\"header__right\">\r\n        <Avatar alt={user?.display_name} src={user?.images[0].url} />\r\n        <h4>{user?.display_name}</h4>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./SongRow.css\";\r\n\r\nfunction SongRow({ track, playSong }) {\r\n  console.log(track);\r\n  return (\r\n    <div className=\"songRow\" onClick={() => playSong(track.id)}>\r\n      <img className=\"songRow__album\" src={track.album.images[0].url} alt=\"\" />\r\n      <div className=\"songRow__info\">\r\n        <h1>{track.name}</h1>\r\n        <p>\r\n          {track.artists.map((artist) => artist.name).join(\", \")} -{\" \"}\r\n          {track.album.name}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongRow;\r\n","import React from \"react\";\r\nimport \"./Body.css\";\r\nimport Header from \"./Header\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport SongRow from \"./SongRow\";\r\n// import PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\r\n// import FavoriteIcon from \"@material-ui/icons/Favorite\";\r\n// import MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\n\r\nfunction Body({ spotify }) {\r\n  const [{ discover_weekly }, dispatch] = useStateValue();\r\n\r\n  const playPlaylist = (id) => {\r\n    spotify\r\n      .play({\r\n        context_uri: `spotify:playlist:37i9dQZF1EIWrzHD24ee8F`,\r\n      })\r\n      .then((res) => {\r\n        spotify.getMyCurrentPlayingTrack().then((r) => {\r\n          dispatch({\r\n            type: \"SET_ITEM\",\r\n            item: r.item,\r\n          });\r\n          dispatch({\r\n            type: \"SET_PLAYING\",\r\n            playing: true,\r\n          });\r\n        });\r\n      });\r\n  };\r\n\r\n  const playSong = (id) => {\r\n    spotify\r\n      .play({\r\n        uris: [`spotify:track:${id}`],\r\n      })\r\n      .then((res) => {\r\n        spotify.getMyCurrentPlayingTrack().then((r) => {\r\n          dispatch({\r\n            type: \"SET_ITEM\",\r\n            item: r.item,\r\n          });\r\n          dispatch({\r\n            type: \"SET_PLAYING\",\r\n            playing: true,\r\n          });\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <Header spotify={spotify} />\r\n\r\n      \r\n      <div className=\"body__songs\">\r\n      \r\n\r\n        {discover_weekly?.tracks.items.map((item) => (\r\n          <SongRow playSong={playSong} track={item.track} />\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"body__info\">\r\n        <img src={discover_weekly?.images[0].url} alt=\"\" />\r\n\r\n        <div className=\"body__infoText\">\r\n          <strong>PLAYLIST</strong>\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport \"./Player.css\";\r\nimport Body from \"./Body\";\r\n\r\nfunction Player({ spotify }) {\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"player__body\">\r\n        <Footer spotify={spotify} />\r\n        <Body spotify={spotify} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","// https://developer.spotify.com/documentation/web-playback-sdk/quick-start/#\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n// Replace with your app's client ID, redirect URI and desired scopes\r\nconst clientId = \"1e1d80ac04d741f097a2ed692a1ebbb5\";\r\nconst redirectUri = \"http://localhost:3000/\";\r\nconst scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-recently-played\",\r\n  \"user-read-playback-state\",\r\n  \"user-top-read\",\r\n  \"user-modify-playback-state\",\r\n];\r\n\r\nexport const getTokenFromResponse = () => {\r\n  return window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce((initial, item) => {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n\r\n      return initial;\r\n    }, {});\r\n};\r\n\r\nexport const accessUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n  \"%20\"\r\n)}&response_type=token&show_dialog=true`;\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { accessUrl } from \"./spotify\";\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"login\">\r\n      <img\r\n        src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\r\n        alt=\"\"\r\n      />\r\n      <a href={accessUrl}>LOGIN TO SPOTIFY</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport Player from \"./Player\";\r\nimport { getTokenFromResponse } from \"./spotify\";\r\nimport \"./App.css\";\r\nimport Login from \"./Login\";\r\n\r\nconst s = new SpotifyWebApi();\r\n\r\nfunction App() {\r\n  const [{ token }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    // Set token\r\n    const hash = getTokenFromResponse();\r\n    window.location.hash = \"\";\r\n    let _token = hash.access_token;\r\n\r\n    if (_token) {\r\n      s.setAccessToken(_token);\r\n\r\n      dispatch({\r\n        type: \"SET_TOKEN\",\r\n        token: _token,\r\n      });\r\n\r\n      s.getPlaylist(\"37i9dQZF1EIWrzHD24ee8F\").then((response) =>\r\n        dispatch({\r\n          type: \"SET_DISCOVER_WEEKLY\",\r\n          discover_weekly: response,\r\n        })\r\n      );\r\n\r\n      s.getMyTopArtists().then((response) =>\r\n        dispatch({\r\n          type: \"SET_TOP_ARTISTS\",\r\n          top_artists: response,\r\n        })\r\n      );\r\n\r\n      dispatch({\r\n        type: \"SET_SPOTIFY\",\r\n        spotify: s,\r\n      });\r\n\r\n      s.getMe().then((user) => {\r\n        dispatch({\r\n          type: \"SET_USER\",\r\n          user,\r\n        });\r\n      });\r\n\r\n      s.getUserPlaylists().then((playlists) => {\r\n        dispatch({\r\n          type: \"SET_PLAYLISTS\",\r\n          playlists,\r\n        });\r\n      });\r\n    }\r\n  }, [token, dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {!token && <Login />}\r\n      {token && <Player spotify={s} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { findAllByDisplayValue } from \"@testing-library/react\";\r\n\r\nexport const initialState = {\r\n  user: null,\r\n  playlists: [],\r\n  spotify: null,\r\n  discover_weekly: null,\r\n  top_artists: null,\r\n  playing: false,\r\n  item: null,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n\r\n    case \"SET_PLAYING\":\r\n      return {\r\n        ...state,\r\n        playing: action.playing,\r\n      };\r\n\r\n    case \"SET_ITEM\":\r\n      return {\r\n        ...state,\r\n        item: action.item,\r\n      };\r\n\r\n    case \"SET_DISCOVER_WEEKLY\":\r\n      return {\r\n        ...state,\r\n        discover_weekly: action.discover_weekly,\r\n      };\r\n\r\n    case \"SET_TOP_ARTISTS\":\r\n      return {\r\n        ...state,\r\n        top_artists: action.top_artists,\r\n      };\r\n\r\n    case \"SET_TOKEN\":\r\n      return {\r\n        ...state,\r\n        token: action.token,\r\n      };\r\n\r\n    case \"SET_SPOTIFY\":\r\n      return {\r\n        ...state,\r\n        spotify: action.spotify,\r\n      };\r\n\r\n    case \"SET_PLAYLISTS\":\r\n      return {\r\n        ...state,\r\n        playlists: action.playlists,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { StateProvider } from \"./StateProvider\";\r\nimport reducer, { initialState } from \"./reducer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}